syntax = "proto3";

package pb;
option go_package = "pb";

message HareMessage {
    int32 pubKey = 1;
    int64 sig = 2;
    uint32 layer = 3;

    oneof payload {
        StatusMessage status = 5;
        CommitMessage commit = 6;
        SignedMessage signed = 7;
        CertMessage certmsg = 8;
        ExtendedProposal eprop = 9;
    }
}

message SignedMessage {
    int64 sig = 1;

    oneof payload {
        StatusMessage status = 5;
        NotifyMessage notify = 6;
        CommitMessage commit = 7;
    }
}

message Certificate {
    repeated HareMessage commits = 1;
    int64 aggSig = 2;
}

message Proof {
    repeated HareMessage statuses = 1; // problem
    Certificate cert = 2;
}

message CommitMessage {
    uint32 k = 1;
    repeated uint32 blockId = 2; // S
}

message StatusMessage {
    uint32 k = 1;
    repeated uint32 blockId = 2; // S
    uint32 ki = 3;
}

message NotifyMessage {
    uint32 k = 1;
    repeated uint32 blockId = 2; // S
}

message ProposalMessage {
    uint32 k = 1;
    repeated uint32 blockId = 2; // S
}

message ExtendedProposal {
    SignedMessage msg = 1;
    Proof proof = 2;
}

message CertMessage {
    Certificate cert = 1;
    SignedMessage msg = 2;
}

// STATUS:          HareMessage.CertMessage.SignedMessage.StatusMessage (SM sign status, HM sign all)
// COMMIT:          HareMessage.CommitMessage (HM sign all)
// NOTIFY:          HareMessage.CertMessage.SignedMessage.NotifyMessage (SM sign notify, HM sign all)
// PROPOSAL:        HareMessage.ExtendedProposal.SignedMessage.ProposalMessage (SM sign proposal, HM sign all)
// PROPOSAL PROOF:  HareMessage.ExtendedProposal.Proof.[SignedMessage].StatusMessage (proof contains signed statuses)
// CERTIFICATE:     contains repeated HareMessage which contain CommitMessages

