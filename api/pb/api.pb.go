// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleMessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleMessage) Reset()         { *m = SimpleMessage{} }
func (m *SimpleMessage) String() string { return proto.CompactTextString(m) }
func (*SimpleMessage) ProtoMessage()    {}
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_b5d0b901b161fce5, []int{0}
}
func (m *SimpleMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleMessage.Unmarshal(m, b)
}
func (m *SimpleMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleMessage.Marshal(b, m, deterministic)
}
func (dst *SimpleMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleMessage.Merge(dst, src)
}
func (m *SimpleMessage) XXX_Size() int {
	return xxx_messageInfo_SimpleMessage.Size(m)
}
func (m *SimpleMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleMessage proto.InternalMessageInfo

func (m *SimpleMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Protocol struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Protocol) Reset()         { *m = Protocol{} }
func (m *Protocol) String() string { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()    {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_b5d0b901b161fce5, []int{1}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Protocol.Unmarshal(m, b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Protocol.Marshal(b, m, deterministic)
}
func (dst *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(dst, src)
}
func (m *Protocol) XXX_Size() int {
	return xxx_messageInfo_Protocol.Size(m)
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

func (m *Protocol) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Protocol) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PeerList struct {
	PeerInfo             []string `protobuf:"bytes,1,rep,name=peerInfo,proto3" json:"peerInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerList) Reset()         { *m = PeerList{} }
func (m *PeerList) String() string { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()    {}
func (*PeerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_b5d0b901b161fce5, []int{2}
}
func (m *PeerList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerList.Unmarshal(m, b)
}
func (m *PeerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerList.Marshal(b, m, deterministic)
}
func (dst *PeerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerList.Merge(dst, src)
}
func (m *PeerList) XXX_Size() int {
	return xxx_messageInfo_PeerList.Size(m)
}
func (m *PeerList) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerList.DiscardUnknown(m)
}

var xxx_messageInfo_PeerList proto.InternalMessageInfo

func (m *PeerList) GetPeerInfo() []string {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

type InMessage struct {
	NodeID               string   `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	ProtocolName         string   `protobuf:"bytes,2,opt,name=protocolName,proto3" json:"protocolName,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InMessage) Reset()         { *m = InMessage{} }
func (m *InMessage) String() string { return proto.CompactTextString(m) }
func (*InMessage) ProtoMessage()    {}
func (*InMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_b5d0b901b161fce5, []int{3}
}
func (m *InMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InMessage.Unmarshal(m, b)
}
func (m *InMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InMessage.Marshal(b, m, deterministic)
}
func (dst *InMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InMessage.Merge(dst, src)
}
func (m *InMessage) XXX_Size() int {
	return xxx_messageInfo_InMessage.Size(m)
}
func (m *InMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InMessage proto.InternalMessageInfo

func (m *InMessage) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *InMessage) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *InMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleMessage)(nil), "pb.SimpleMessage")
	proto.RegisterType((*Protocol)(nil), "pb.Protocol")
	proto.RegisterType((*PeerList)(nil), "pb.PeerList")
	proto.RegisterType((*InMessage)(nil), "pb.InMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpaceMeshServiceClient is the client API for SpaceMeshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpaceMeshServiceClient interface {
	Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	RegisterProtocol(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*SimpleMessage, error)
	SendMessage(ctx context.Context, in *InMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	Broadcast(ctx context.Context, in *InMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
}

type spaceMeshServiceClient struct {
	cc *grpc.ClientConn
}

func NewSpaceMeshServiceClient(cc *grpc.ClientConn) SpaceMeshServiceClient {
	return &spaceMeshServiceClient{cc}
}

func (c *spaceMeshServiceClient) Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpaceMeshService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMeshServiceClient) RegisterProtocol(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpaceMeshService/RegisterProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMeshServiceClient) SendMessage(ctx context.Context, in *InMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpaceMeshService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMeshServiceClient) Broadcast(ctx context.Context, in *InMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpaceMeshService/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceMeshServiceServer is the server API for SpaceMeshService service.
type SpaceMeshServiceServer interface {
	Echo(context.Context, *SimpleMessage) (*SimpleMessage, error)
	RegisterProtocol(context.Context, *Protocol) (*SimpleMessage, error)
	SendMessage(context.Context, *InMessage) (*SimpleMessage, error)
	Broadcast(context.Context, *InMessage) (*SimpleMessage, error)
}

func RegisterSpaceMeshServiceServer(s *grpc.Server, srv SpaceMeshServiceServer) {
	s.RegisterService(&_SpaceMeshService_serviceDesc, srv)
}

func _SpaceMeshService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMeshServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpaceMeshService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMeshServiceServer).Echo(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMeshService_RegisterProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Protocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMeshServiceServer).RegisterProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpaceMeshService/RegisterProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMeshServiceServer).RegisterProtocol(ctx, req.(*Protocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMeshService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMeshServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpaceMeshService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMeshServiceServer).SendMessage(ctx, req.(*InMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMeshService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMeshServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpaceMeshService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMeshServiceServer).Broadcast(ctx, req.(*InMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpaceMeshService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SpaceMeshService",
	HandlerType: (*SpaceMeshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _SpaceMeshService_Echo_Handler,
		},
		{
			MethodName: "RegisterProtocol",
			Handler:    _SpaceMeshService_RegisterProtocol_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _SpaceMeshService_SendMessage_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _SpaceMeshService_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_b5d0b901b161fce5) }

var fileDescriptor_api_b5d0b901b161fce5 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0x91, 0xfc, 0xa7, 0xd2, 0x54, 0x02, 0x7b, 0xfb, 0x4f, 0xb8, 0x3d, 0x88, 0x85, 0x16,
	0xe1, 0x83, 0x45, 0xdd, 0x9b, 0x8f, 0xc5, 0xa5, 0x08, 0x9c, 0x60, 0xa4, 0x27, 0x58, 0x49, 0x13,
	0x59, 0x20, 0xef, 0x2e, 0x2b, 0xc5, 0x24, 0xd7, 0xbc, 0x42, 0xde, 0x26, 0xaf, 0x91, 0x57, 0xc8,
	0x83, 0x84, 0x95, 0x25, 0x83, 0x89, 0x0f, 0xb9, 0xcd, 0x37, 0x33, 0xdf, 0x6f, 0x76, 0x3f, 0xb0,
	0x99, 0x2c, 0x17, 0x52, 0x89, 0x46, 0x10, 0x53, 0xa6, 0xb3, 0x1f, 0x85, 0x10, 0x45, 0x85, 0x21,
	0x93, 0x65, 0xc8, 0x38, 0x17, 0x0d, 0x6b, 0x4a, 0xc1, 0xeb, 0xe3, 0x06, 0xfd, 0x09, 0x6e, 0x52,
	0xee, 0x65, 0x85, 0x57, 0x58, 0xd7, 0xac, 0x40, 0xf2, 0x19, 0x46, 0x07, 0x56, 0xdd, 0xa2, 0x67,
	0xf8, 0x46, 0x60, 0xc7, 0x47, 0x41, 0x97, 0x60, 0x6d, 0xf5, 0x7e, 0x26, 0x2a, 0x42, 0x60, 0xc8,
	0xd9, 0xbe, 0x5f, 0x68, 0x6b, 0xdd, 0x93, 0x42, 0x35, 0x9e, 0xe9, 0x1b, 0xc1, 0x28, 0x6e, 0x6b,
	0xfa, 0x0b, 0xac, 0x2d, 0xa2, 0xda, 0x94, 0x75, 0x43, 0x66, 0x60, 0x49, 0x44, 0x15, 0xf1, 0x1b,
	0xe1, 0x19, 0xfe, 0x20, 0xb0, 0xe3, 0x93, 0xa6, 0x0c, 0xec, 0x88, 0xf7, 0xe7, 0xbf, 0xc2, 0x98,
	0x8b, 0x1c, 0xa3, 0x75, 0x87, 0xef, 0x14, 0xa1, 0xe0, 0xc8, 0xee, 0x01, 0xd7, 0xfa, 0xb8, 0xd9,
	0x4e, 0xcf, 0x7a, 0xc4, 0x83, 0x0f, 0x92, 0xdd, 0x57, 0x82, 0xe5, 0xde, 0xc0, 0x37, 0x02, 0x27,
	0xee, 0xe5, 0xf2, 0xc9, 0x84, 0x49, 0x22, 0x59, 0xa6, 0x7f, 0xb9, 0x4b, 0x50, 0x1d, 0xca, 0x0c,
	0x49, 0x04, 0xc3, 0x7f, 0xd9, 0x4e, 0x90, 0xe9, 0x42, 0xa6, 0x8b, 0xb3, 0x10, 0x66, 0x6f, 0x5b,
	0xf4, 0xfb, 0xc3, 0xf3, 0xcb, 0xa3, 0xf9, 0x85, 0x4e, 0xc2, 0xc3, 0xef, 0x10, 0xef, 0x98, 0x9e,
	0x85, 0x98, 0xed, 0xc4, 0xca, 0x98, 0x93, 0x0d, 0x4c, 0x62, 0x2c, 0xca, 0xba, 0x41, 0x75, 0x8a,
	0xc9, 0xd1, 0x8c, 0x5e, 0x5d, 0x22, 0x7e, 0x6b, 0x89, 0x53, 0xea, 0x68, 0xa2, 0xea, 0xec, 0x9a,
	0xb6, 0x86, 0x8f, 0x09, 0xf2, 0xbc, 0x8f, 0xc4, 0xd5, 0xd6, 0x53, 0x42, 0x97, 0x48, 0x9f, 0x5a,
	0x92, 0x4b, 0x2d, 0x4d, 0xaa, 0x91, 0xe7, 0x9a, 0xf2, 0x1f, 0xec, 0xbf, 0x4a, 0xb0, 0x3c, 0x63,
	0x75, 0xf3, 0x0e, 0x86, 0xd7, 0x32, 0x08, 0x75, 0x35, 0x23, 0xed, 0x8d, 0x2b, 0x63, 0x9e, 0x8e,
	0xdb, 0x90, 0xff, 0xbc, 0x06, 0x00, 0x00, 0xff, 0xff, 0x17, 0x96, 0xae, 0x4b, 0x58, 0x02, 0x00,
	0x00,
}
